//
//  GameView.swift
//  BubblePopAssessment
//
//  Created by Mitch Munro on 2/4/2024.
//

import SwiftUI
import Stitch

struct GameView: View {
    
    @StateObject var viewModel: GameViewModel
    
    @StitchObservable(\.highScoreViewModel) var highScoreViewModel
    
    @State var isScreenSetupWorkDone = false
    
    @State var isOn = true
    
    init(gameTime: Int = 30, playerName: String = "Player", maxNumberBubbles: Int = 15){
        _viewModel = StateObject(wrappedValue: GameViewModel(
            gameTimeTotal: gameTime,
            playerName: playerName,
            maxNumberBubbles: maxNumberBubbles
        ))
    }
    
    var body: some View {
        VStack{
            GameStatsBar
            
            if viewModel.isGamePlaying{
                ZStack{
                    
                    PreGameCountdown
                    
                    if !viewModel.isPreGame{
                        GameView
                    }
                }
            }
            else{
                GameDoneView
            }
        }
        .onAppear{
            viewModel.reset()
        }
    }
    
    var GameStatsBar: some View {
        VStack{
            HStack {
                Text("Time: \(viewModel.gameTimeLeft)")
                    .font(.title)
                    .foregroundStyle(.indigo)
                    .padding(.horizontal)
                Spacer()
                Text("Score: \(viewModel.score)")
                    .font(.title)
                    .foregroundStyle(.indigo)
                    .padding(.horizontal)
                
            }
            HStack{
                Text("Player: \(viewModel.playerName)")
                    .font(.caption)
                    .foregroundStyle(.indigo)
                    .padding(.horizontal)
                
                Spacer()
                
                Text("High Score: \(highScoreViewModel.ReturnHighestScore())")
                    .font(.caption)
                    .foregroundStyle(.indigo)
                    .padding(.horizontal)
            }
            
            Rectangle()
                .frame(height: 3)
                .foregroundColor(Color.indigo.opacity(0.6))
        }
    }
    
    var GameView: some View{
        GeometryReader{ geometry in
            ZStack{}
            .frame(maxWidth:.infinity, maxHeight: .infinity)
            .onReceive(viewModel.timer, perform: { _ in
                
                // This is done here rather than onAppear, as the geometry reader hasn't had a chance to set the size properly in onAppear
                if !isScreenSetupWorkDone{
                    self.isScreenSetupWorkDone = true
                    viewModel.xBoundsMin = 0
                    viewModel.xBoundsMax = Int(geometry.size.width)
                    viewModel.yBoundsMin = 0
                    viewModel.yBoundsMax = Int(geometry.size.height)
                }
                
                if viewModel.isGamePlaying{
                    viewModel.removeAndGenerateBubbles()  //One set of bubbles generated by GameViewModel directly after countdown
                    viewModel.countdown()
                }
            })
            DrawBubbles
        }
    }
    
    var PreGameCountdown: some View{
        VStack{
            Text(viewModel.preGameString)
                .font(.system(size: 100))
                .fontWeight(.bold)
                .foregroundColor(.yellow)
                .animation(.spring(duration: 0.5))
        }
            .frame(maxWidth:.infinity, maxHeight: .infinity)
            .onReceive(viewModel.timer, perform: { _ in
                viewModel.preGameCountdown()
            })
    }
    
    var DrawBubbles: some View{
        return ForEach(viewModel.bubbles) {bubble in
                Circle()
                    .position(bubble.position)
                    .frame(width: bubble.size)
                    .foregroundColor(bubble.color)
                    .opacity(bubble.isRemoved ? 0 : 1)
                    .onTapGesture{ _ in
                            viewModel.ScoreBubble(bubble: bubble)
                    }
                    .animation(Animation.easeInOut(duration: viewModel.decreasingFraction() + 0.2),
                               value: bubble.isRemoved)
        }
    }
    
    var GameDoneView: some View{
        ScrollView{
            VStack{
                Spacer()
                Text("Player:")
                    .font(.largeTitle)
                    .frame(maxWidth: .infinity, alignment: .center)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.purple)
                    .fontWeight(.bold)
                    .padding(.horizontal)
                Text(viewModel.playerName)
                    .font(.title)
                    .foregroundColor(.purple)
                    .padding(.bottom, 10)
                
                Text("Final Score:")
                    .font(.largeTitle)
                    .frame(maxWidth: .infinity, alignment: .center)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.purple)
                    .fontWeight(.bold)
                
                Text("\(Int(viewModel.score))")
                    .font(.title)
                    .foregroundColor(.purple)
                    .padding(.bottom, 20)
                
                Text("High Scores:")
                    .font(.title)
                    .frame(maxWidth: .infinity, alignment: .center)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.indigo)
                    .padding(.horizontal)
                
                DisplayScores
                    
            }
        }
        .onAppear{
            viewModel.GameFinished()
        }
    }
    
    var DisplayScores: some View{
        ForEach(highScoreViewModel.highScoresList.prefix(10), id: \.self) { HS in
            Text("\(HS.playerName)  -  \(HS.score)")
                .padding(.vertical, 5)
                .font(.title3)
                .foregroundColor(.indigo)
                .bold()
        }
    }
}

#Preview {
    NavigationStack{
        GameView()
    }
}
